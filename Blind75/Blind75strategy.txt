################################# Array and Hashing #################################

- Contains duplicate (check duplicate in an array): 
    use Hashset (hashtable data structure, only unique elements, allow null).
    Run a loop inserting element to hashset while checking if hashet contains that element. 
    if contains return true. return false after the loop  //  hashset.containsKey(nums[i])

- Valid Anagram (Anagram is a word rephrased using all original letters exactly one): 
    check if their lengths are equal ( A and B)
    Run a loop to count repeated character in A++ and B--
    Run a second loop to check count of the store === 0
    int[] store = new int[26]
    store[A.charAt(i) - 'a']++

- TwoSum (find position of a,b in array that a + b = target):
    run a loop and check if hashmap contains target hashmap.containsKey(currentNum) -> if true -> return index of a and b
    if false -> add value and index to hashmap.put(value,index) 

- groupAnagram (group list of anagram words in an array):
    option 1: 
        iterate every string in list of words
        sort the string's character ascending -> key = new String(arr)
        check if hashmap.containsKey(key)
            if yes -> add string to the list of that key
            if no -> make a new list using that key then add the string to the list
            return ArrayList<>(hashmap.values())
    option 2:
        int[] store = new int[26]
        loop (str.length) -> store[A.charAt(i) - 'a']  -> key = Arrays.toString(store)

- top K frequent Element :
    loop and count frequent -> for (int num : nums) hashmap.put(num, hashmap.getOrDefault(num, 0) + 1);   
    make a piority queue -> sort hashmap
    return top K 

- 238. Product of Array Except Self
    run 2 loops, product of left side * product of right side

- 128. Longest Consecutive Sequence  - runs in O(n) time - độ dài nhất của dãy số liên tục
    sort the original array 
    if num[i]+1 == num[i] -> count ++ -> if count > max; max = count; 
    else if num[i] == num[i+1] continue // skip same num
    else count = 1;
    return max

################################# 2 pointer #################################
- 125. Valid Palindrome - reads the same forward and backward
    a variable A start from begin and a variable B start from end
    compare A[i] and B[i] if they're character -> return false if not equal

- 15. 3Sum
    sort the array ascending -> iterate from 0 to array.length - 2 
    if num[i] == num[i-1] -> skip  (same number with previous)
    let the target = 0 - current , left = current+1; right = array.length -1
    while (left < right) 
        if (left+right==target) 
            -> add to result
            while left == left+1 -> left++
            while right == right-1 -> right--
        else if left+right>target ->right--
        else left++

- 11. Container With Most Water 
    let left = 0, right = array.length -1
    length = right-left, height = min(heightLeft, heightRight) -> area = length*height   
    if heightLeft > heightRight -> right-- 
    if heightLeft < heightRight -> left++ 
    -> calculate new area -> max(oldArea, newArea)

################################# Sliding Window #################################

- 121. Best Time to Buy and Sell Stock 
    iterate thru the array
    minPrice = Min(currentPrice, oldMinPrice)
    currentProfit = currentPrice - minPrice
    maxProfit = max(currentProfit, oldMaxProfit)

- 3. Longest Substring Without Repeating Characters
    iterate thru array, create new charList
    if charList contains current Character
        remove the character in charList
        remove from the begining index to that character index in charList
    then
    add current Character
    maxLength = Max(oldListCharLength, newListCharLength);

- 424. Longest Repeating Character Replacement ( K replacements )
    startIndex = 0;
    iterate thru the string
    maxRepeatedCharCount at currentIndex = maxCount 
    maxLength = currentIndex - startIndex + 1
    if maxLength > K + maxCount  // if reached replacements max 
        startIndex++    // reduce maxLength by 1
        maxCount--      // reduce charCount by 1
    answer = Max(maxLength -1, oldMaxLength); //-1 because startIndex++

- 76. Minimum Window Substring
    set target 's characters as key and it's count as value in hashmap
    iterate thru the string 
        if hashmap contains current char -> reduce the count in hashmap by 1 -> if count == 0 -> increase the matched 
        while matched == hashmap.size() 
            if the current window length < min window length
                -> set the minWindow = current window length
                -> set the minStart of window to current start
            if hashmap contains character at start -> reduce matched -> increase count of that char in hashmap by 1
            increase the start by 1
    end -> substring from minStart to the minWindow 


################################# Stack #################################

- 20. Valid Parentheses
    iterate thru the string
        if current char is left Parentheses -> push the char to stack
        else if current char is right parentheses -> compare the peek value of stack and the current char 
            -> if true couple -> pop the stack
            -> else -> return false
    return true if stack.length ==0 
            -> else false

################################# Binary Search #################################

- 153. Find Minimum in Rotated Sorted Array
    set left = 0 , right = array.length -1 , mid =  ( left+right )/2
    while left < right 
        if num at left <= num at right -> min = num at left -> return min
        if num at mid >= num at left -> set left = mid +1 (because num at left < num at right)
        else set right = mid 

- 33. Search in Rotated Sorted Array
    set left = 0 , right = array.length -1 , mid =  ( left+right )/2
    while left < right 
        if num at min == target -> return index
        if num at left <= num at mid 
            if ( target > num at mid or target < num at left ) -> left = mid +1 
            else right = mid -1
        else
            if (target < nums[mid] || target > nums [r]) -> right = mid - 1;
            else -> l = mid + 1;
        return -1


################################# Backtrack #################################

### Bit Manipulation

### Greedy

### Graph

### Interval

### Math

### 1D-Programing

### 2D-Programing


