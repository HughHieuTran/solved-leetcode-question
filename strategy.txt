################################# Array and Hashing #################################

- Contains duplicate (check duplicate in an array): 
    use Hashset (hashtable data structure, only unique elements, allow null).
    Run a loop inserting element to hashset while checking if hashet contains that element. 
    if contains return true. return false after the loop  //  hashset.containsKey(nums[i])

- Valid Anagram (Anagram is a word rephrased using all original letters exactly one): 
    check if their lengths are equal ( A and B)
    Run a loop to count repeated character in A++ and B--
    Run a second loop to check count of the store === 0
    int[] store = new int[26]
    store[A.charAt(i) - 'a']++

- TwoSum (find position of a,b in array that a + b = target):
    run a loop and check if hashmap contains target hashmap.containsKey(currentNum) -> if true -> return index of a and b
    if false -> add value and index to hashmap.put(value,index) 

- groupAnagram (group list of anagram words in an array):
    option 1: 
        iterate every string in list of words
        sort the string's character ascending -> key = new String(arr)
        check if hashmap.containsKey(key)
            if yes -> add string to the list of that key
            if no -> make a new list using that key then add the string to the list
            return ArrayList<>(hashmap.values())
    option 2:
        int[] store = new int[26]
        loop (str.length) -> store[A.charAt(i) - 'a']  -> key = Arrays.toString(store)

- top K frequent Element :
    loop and count frequent -> for (int num : nums) hashmap.put(num, hashmap.getOrDefault(num, 0) + 1);   
    make a piority queue -> sort hashmap
    return top K 

- 238. Product of Array Except Self
    run 2 loops, product of left side * product of right side

- 128. Longest Consecutive Sequence  - runs in O(n) time - độ dài nhất của dãy số liên tục
    sort the original array 
    if num[i]+1 == num[i] -> count ++ -> if count > max; max = count; 
    else if num[i] == num[i+1] continue // skip same num
    else count = 1;
    return max

################################# 2 pointer #################################
- 125. Valid Palindrome - reads the same forward and backward
    a variable A start from begin and a variable B start from end
    compare A[i] and B[i] if they're character -> return false if not equal

- 15. 3Sum
    sort the array ascending -> iterate from 0 to array.length - 2 
    if num[i] == num[i-1] -> skip  (same number with previous)
    let the target = 0 - current , left = current+1; right = array.length -1
    while (left < right) 
        if (left+right==target) 
            -> add to result
            while left == left+1 -> left++
            while right == right-1 -> right--
        else if left+right>target ->right--
        else left++

- 11. Container With Most Water 
    let left = 0, right = array.length -1
    length = right-left, height = min(heightLeft, heightRight) -> area = length*height   
    if heightLeft > heightRight -> right-- 
    if heightLeft < heightRight -> left++ 
    -> calculate new area -> max(oldArea, newArea)

################################# Sliding Window #################################

- 121. Best Time to Buy and Sell Stock 
    iterate thru the array
    minPrice = Min(currentPrice, oldMinPrice)
    currentProfit = currentPrice - minPrice
    maxProfit = max(currentProfit, oldMaxProfit)

- 3. Longest Substring Without Repeating Characters
    iterate thru array, create new charList
    if charList contains current Character
        remove the character in charList
        remove from the begining index to that character index in charList
    then
    add current Character
    maxLength = Max(oldListCharLength, newListCharLength);

- 424. Longest Repeating Character Replacement ( K replacements )
    startIndex = 0;
    iterate thru the string
    maxRepeatedCharCount at currentIndex = maxCount 
    maxLength = currentIndex - startIndex + 1
    if maxLength > K + maxCount  // if reached replacements max 
        startIndex++    // reduce maxLength by 1
        maxCount--      // reduce charCount by 1
    answer = Max(maxLength -1, oldMaxLength); //-1 because startIndex++







  





################################# Backtrack #################################

### Bit Manipulation

### Greedy

### Graph

### Interval

### Math

### 1D-Programing

### 2D-Programing


